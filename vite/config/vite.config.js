//! vite.config.js
import { defineConfig } from 'vite'; //üëà
//* Path
import { dirname, resolve } from 'node:path'; //üëà
import { fileURLToPath } from 'node:url'; //üëà
import { paths } from './path.js';
//* Plugins
import postcssSortMediaQueries from 'postcss-sort-media-queries';
import postcssMediaMinMax from 'postcss-media-minmax'; //üëà
import autoprefixer from 'autoprefixer'; //üëà
import { viteConvertPugInHtml } from '@mish.dev/vite-convert-pug-in-html'; //üëà
//* Tasks
import { moveHtmlFiles } from '../tasks/moveHtmlFiles.js'; //üëà
import { fontStyle } from '../tasks/fontsStyle.js'; //üëà
import { convertImagesToWebp } from '../tasks/webp.js'; //üëà
import { compileScss } from '../tasks/scss.js'; //üëà
import { fonts } from '../tasks/fonts.js'; //üëà
//* app
import { app } from './app.js';
import { getPugConfig } from './pug-config.js';

const __dirname = dirname(fileURLToPath(import.meta.url)); //üëà

// üîπ –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –ø–µ—Ä–µ–¥ dev/build
// fonts('./public/fonts');
fonts(paths.fonts.src);

export default defineConfig(({ command }) => {
  const isProd = command === 'build';

  return {
    base: './',
    plugins: [
      fonts(),
      ...(isProd ? [compileScss()] : []), // üëà –ó–∞–ø—É—Å–∫–∞–µ–º compileScss() —Ç–æ–ª—å–∫–æ –ø—Ä–∏ build
      fontStyle(),
      convertImagesToWebp(app.webp),
      viteConvertPugInHtml(getPugConfig(isProd)),
      moveHtmlFiles(), // üëà –∫–ª—é—á–µ–≤–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è HTML
    ],
    server: {
      open: true,
    },
    css: {
      devSourcemap: true,
      postcss: {
        plugins: [
          autoprefixer(app.autoprefixer),
          postcssSortMediaQueries(app.postcssSortMediaQueries),
          //*–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤
          ...(isProd ? [] : [postcssMediaMinMax(app.postcssMediaMinMax)]), //üëà
        ],
      },
      preprocessorOptions: { scss: {} },
    },
    resolve: {
      alias: { '@': resolve(__dirname, 'src') },
    },

    build: {
      outDir: 'build',
      emptyOutDir: true,
      sourcemap: !isProd,
    },
  };
});
