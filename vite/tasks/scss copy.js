import { execSync } from 'child_process';
import { resolve, basename } from 'path';
import fs from 'fs';
import { globSync } from 'glob';

export function compileScss() {
  const inputDir = resolve('src/scss'); // –∏—Å—Ö–æ–¥–Ω—ã–µ SCSS
  const outputDir = resolve('public/css'); // –∫—É–¥–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º

  fs.mkdirSync(outputDir, { recursive: true });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ SCSS-—Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const scssFiles = globSync(`${inputDir}/*.scss`).map((f) =>
    basename(f, '.scss')
  );

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ CSS-—Ñ–∞–π–ª–æ–≤ –≤ outputDir
  const existingCssFiles = fs.existsSync(outputDir)
    ? fs.readdirSync(outputDir).filter((f) => f.endsWith('.css'))
    : [];

  // –£–¥–∞–ª—è–µ–º CSS, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö
  existingCssFiles.forEach((file) => {
    const name = file.replace('.css', '');
    if (!scssFiles.includes(name)) {
      fs.unlinkSync(resolve(outputDir, file));
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: ${file}`);
    }
  });

  // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ SCSS
  scssFiles.forEach((fileName) => {
    const inputFile = `${inputDir}/${fileName}.scss`;
    const outputFile = `${outputDir}/${fileName}.css`;

    try {
      execSync(`sass "${inputFile}":"${outputFile}"`, { stdio: 'inherit' });
      console.log(`‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω: ${fileName}.scss ‚Üí ${fileName}.css`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ ${fileName}.scss:`, error.message);
    }
  });
}
